
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UsuariosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    solicitudes: SolicitudesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    nombreapellido: string
    email: string
    password: string
  }, ExtArgs["result"]["usuarios"]>
  composites: {}
}

/**
 * Model Usuarios
 * 
 */
export type Usuarios = runtime.Types.DefaultSelection<UsuariosPayload>
export type ColectivoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    linea: LineasPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    interno: string
    id_linea: number
  }, ExtArgs["result"]["colectivo"]>
  composites: {}
}

/**
 * Model Colectivo
 * 
 */
export type Colectivo = runtime.Types.DefaultSelection<ColectivoPayload>
export type ParadasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    linea: LineasPayload<ExtArgs>
    solicitudes: SolicitudesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    latitud: string
    longitud: string
    id_linea: number
    direccion: string
  }, ExtArgs["result"]["paradas"]>
  composites: {}
}

/**
 * Model Paradas
 * 
 */
export type Paradas = runtime.Types.DefaultSelection<ParadasPayload>
export type SolicitudesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    parada: ParadasPayload<ExtArgs>
    usuario: UsuariosPayload<ExtArgs>
    linea: LineasPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
  }, ExtArgs["result"]["solicitudes"]>
  composites: {}
}

/**
 * Model Solicitudes
 * 
 */
export type Solicitudes = runtime.Types.DefaultSelection<SolicitudesPayload>
export type LineasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    paradas: ParadasPayload<ExtArgs>[]
    colectivos: ColectivoPayload<ExtArgs>[]
    solicitudes: SolicitudesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    linea: string
  }, ExtArgs["result"]["lineas"]>
  composites: {}
}

/**
 * Model Lineas
 * 
 */
export type Lineas = runtime.Types.DefaultSelection<LineasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.colectivo`: Exposes CRUD operations for the **Colectivo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colectivos
    * const colectivos = await prisma.colectivo.findMany()
    * ```
    */
  get colectivo(): Prisma.ColectivoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.paradas`: Exposes CRUD operations for the **Paradas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paradas
    * const paradas = await prisma.paradas.findMany()
    * ```
    */
  get paradas(): Prisma.ParadasDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.solicitudes`: Exposes CRUD operations for the **Solicitudes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Solicitudes
    * const solicitudes = await prisma.solicitudes.findMany()
    * ```
    */
  get solicitudes(): Prisma.SolicitudesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.lineas`: Exposes CRUD operations for the **Lineas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lineas
    * const lineas = await prisma.lineas.findMany()
    * ```
    */
  get lineas(): Prisma.LineasDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuarios: 'Usuarios',
    Colectivo: 'Colectivo',
    Paradas: 'Paradas',
    Solicitudes: 'Solicitudes',
    Lineas: 'Lineas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuarios' | 'colectivo' | 'paradas' | 'solicitudes' | 'lineas'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuarios: {
        operations: {
          findUnique: {
            args: Prisma.UsuariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload> | null
            payload: UsuariosPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UsuariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UsuariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload> | null
            payload: UsuariosPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UsuariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UsuariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>[]
            payload: UsuariosPayload<ExtArgs>
          }
          create: {
            args: Prisma.UsuariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UsuariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsuariosPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UsuariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          update: {
            args: Prisma.UsuariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UsuariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsuariosPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UsuariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsuariosPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UsuariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsuariosPayload>
            payload: UsuariosPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuarios>
            payload: UsuariosPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UsuariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
            payload: UsuariosPayload<ExtArgs>
          }
          count: {
            args: Prisma.UsuariosCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
            payload: UsuariosPayload<ExtArgs>
          }
        }
      }
      Colectivo: {
        operations: {
          findUnique: {
            args: Prisma.ColectivoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload> | null
            payload: ColectivoPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.ColectivoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.ColectivoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload> | null
            payload: ColectivoPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.ColectivoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.ColectivoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>[]
            payload: ColectivoPayload<ExtArgs>
          }
          create: {
            args: Prisma.ColectivoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.ColectivoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ColectivoPayload<ExtArgs>
          }
          delete: {
            args: Prisma.ColectivoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          update: {
            args: Prisma.ColectivoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.ColectivoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ColectivoPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.ColectivoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ColectivoPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.ColectivoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColectivoPayload>
            payload: ColectivoPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.ColectivoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColectivo>
            payload: ColectivoPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.ColectivoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ColectivoGroupByOutputType>[]
            payload: ColectivoPayload<ExtArgs>
          }
          count: {
            args: Prisma.ColectivoCountArgs<ExtArgs>,
            result: $Utils.Optional<ColectivoCountAggregateOutputType> | number
            payload: ColectivoPayload<ExtArgs>
          }
        }
      }
      Paradas: {
        operations: {
          findUnique: {
            args: Prisma.ParadasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload> | null
            payload: ParadasPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.ParadasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.ParadasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload> | null
            payload: ParadasPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.ParadasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.ParadasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>[]
            payload: ParadasPayload<ExtArgs>
          }
          create: {
            args: Prisma.ParadasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.ParadasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ParadasPayload<ExtArgs>
          }
          delete: {
            args: Prisma.ParadasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          update: {
            args: Prisma.ParadasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.ParadasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ParadasPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.ParadasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: ParadasPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.ParadasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParadasPayload>
            payload: ParadasPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.ParadasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParadas>
            payload: ParadasPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.ParadasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParadasGroupByOutputType>[]
            payload: ParadasPayload<ExtArgs>
          }
          count: {
            args: Prisma.ParadasCountArgs<ExtArgs>,
            result: $Utils.Optional<ParadasCountAggregateOutputType> | number
            payload: ParadasPayload<ExtArgs>
          }
        }
      }
      Solicitudes: {
        operations: {
          findUnique: {
            args: Prisma.SolicitudesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload> | null
            payload: SolicitudesPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.SolicitudesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.SolicitudesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload> | null
            payload: SolicitudesPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.SolicitudesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.SolicitudesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>[]
            payload: SolicitudesPayload<ExtArgs>
          }
          create: {
            args: Prisma.SolicitudesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.SolicitudesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SolicitudesPayload<ExtArgs>
          }
          delete: {
            args: Prisma.SolicitudesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          update: {
            args: Prisma.SolicitudesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.SolicitudesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SolicitudesPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.SolicitudesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SolicitudesPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.SolicitudesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SolicitudesPayload>
            payload: SolicitudesPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.SolicitudesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSolicitudes>
            payload: SolicitudesPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.SolicitudesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SolicitudesGroupByOutputType>[]
            payload: SolicitudesPayload<ExtArgs>
          }
          count: {
            args: Prisma.SolicitudesCountArgs<ExtArgs>,
            result: $Utils.Optional<SolicitudesCountAggregateOutputType> | number
            payload: SolicitudesPayload<ExtArgs>
          }
        }
      }
      Lineas: {
        operations: {
          findUnique: {
            args: Prisma.LineasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload> | null
            payload: LineasPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.LineasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.LineasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload> | null
            payload: LineasPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.LineasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.LineasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>[]
            payload: LineasPayload<ExtArgs>
          }
          create: {
            args: Prisma.LineasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.LineasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: LineasPayload<ExtArgs>
          }
          delete: {
            args: Prisma.LineasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          update: {
            args: Prisma.LineasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.LineasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: LineasPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.LineasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: LineasPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.LineasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LineasPayload>
            payload: LineasPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.LineasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLineas>
            payload: LineasPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.LineasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LineasGroupByOutputType>[]
            payload: LineasPayload<ExtArgs>
          }
          count: {
            args: Prisma.LineasCountArgs<ExtArgs>,
            result: $Utils.Optional<LineasCountAggregateOutputType> | number
            payload: LineasPayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */


  export type UsuariosCountOutputType = {
    solicitudes: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    solicitudes?: boolean | UsuariosCountOutputTypeCountSolicitudesArgs
  }

  // Custom InputTypes

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountSolicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SolicitudesWhereInput
  }



  /**
   * Count Type ParadasCountOutputType
   */


  export type ParadasCountOutputType = {
    solicitudes: number
  }

  export type ParadasCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    solicitudes?: boolean | ParadasCountOutputTypeCountSolicitudesArgs
  }

  // Custom InputTypes

  /**
   * ParadasCountOutputType without action
   */
  export type ParadasCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParadasCountOutputType
     */
    select?: ParadasCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParadasCountOutputType without action
   */
  export type ParadasCountOutputTypeCountSolicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SolicitudesWhereInput
  }



  /**
   * Count Type LineasCountOutputType
   */


  export type LineasCountOutputType = {
    paradas: number
    colectivos: number
    solicitudes: number
  }

  export type LineasCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    paradas?: boolean | LineasCountOutputTypeCountParadasArgs
    colectivos?: boolean | LineasCountOutputTypeCountColectivosArgs
    solicitudes?: boolean | LineasCountOutputTypeCountSolicitudesArgs
  }

  // Custom InputTypes

  /**
   * LineasCountOutputType without action
   */
  export type LineasCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LineasCountOutputType
     */
    select?: LineasCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LineasCountOutputType without action
   */
  export type LineasCountOutputTypeCountParadasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParadasWhereInput
  }


  /**
   * LineasCountOutputType without action
   */
  export type LineasCountOutputTypeCountColectivosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ColectivoWhereInput
  }


  /**
   * LineasCountOutputType without action
   */
  export type LineasCountOutputTypeCountSolicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SolicitudesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nombreapellido: string | null
    email: string | null
    password: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nombreapellido: string | null
    email: string | null
    password: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nombreapellido: number
    email: number
    password: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nombreapellido?: true
    email?: true
    password?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nombreapellido?: true
    email?: true
    password?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nombreapellido?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to aggregate.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuariosWhereInput
    orderBy?: Enumerable<UsuariosOrderByWithAggregationInput>
    by: UsuariosScalarFieldEnum[]
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    id: number
    nombreapellido: string
    email: string
    password: string
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreapellido?: boolean
    email?: boolean
    password?: boolean
    solicitudes?: boolean | Usuarios$solicitudesArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>

  export type UsuariosSelectScalar = {
    id?: boolean
    nombreapellido?: boolean
    email?: boolean
    password?: boolean
  }

  export type UsuariosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    solicitudes?: boolean | Usuarios$solicitudesArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeArgs<ExtArgs>
  }


  type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosArgs> = $Types.GetResult<UsuariosPayload, S>

  type UsuariosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface UsuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuarios'], meta: { name: 'Usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuariosFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuariosFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuarios'> extends True ? Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuariosFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuariosFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuarios'> extends True ? Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends UsuariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuariosCreateArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends UsuariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuariosDeleteArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuariosUpdateArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends UsuariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuariosUpsertArgs<ExtArgs>>
    ): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuariosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    solicitudes<T extends Usuarios$solicitudesArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$solicitudesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuarios base type for findUnique actions
   */
  export type UsuariosFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findUnique
   */
  export interface UsuariosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsuariosFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios base type for findFirst actions
   */
  export type UsuariosFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * Usuarios findFirst
   */
  export interface UsuariosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsuariosFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuarios.
     */
    data: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }


  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: Enumerable<UsuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuarios.
     */
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     */
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     */
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }


  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter which Usuarios to delete.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios.solicitudes
   */
  export type Usuarios$solicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    where?: SolicitudesWhereInput
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    cursor?: SolicitudesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }


  /**
   * Usuarios without action
   */
  export type UsuariosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude<ExtArgs> | null
  }



  /**
   * Model Colectivo
   */


  export type AggregateColectivo = {
    _count: ColectivoCountAggregateOutputType | null
    _avg: ColectivoAvgAggregateOutputType | null
    _sum: ColectivoSumAggregateOutputType | null
    _min: ColectivoMinAggregateOutputType | null
    _max: ColectivoMaxAggregateOutputType | null
  }

  export type ColectivoAvgAggregateOutputType = {
    id: number | null
    id_linea: number | null
  }

  export type ColectivoSumAggregateOutputType = {
    id: number | null
    id_linea: number | null
  }

  export type ColectivoMinAggregateOutputType = {
    id: number | null
    interno: string | null
    id_linea: number | null
  }

  export type ColectivoMaxAggregateOutputType = {
    id: number | null
    interno: string | null
    id_linea: number | null
  }

  export type ColectivoCountAggregateOutputType = {
    id: number
    interno: number
    id_linea: number
    _all: number
  }


  export type ColectivoAvgAggregateInputType = {
    id?: true
    id_linea?: true
  }

  export type ColectivoSumAggregateInputType = {
    id?: true
    id_linea?: true
  }

  export type ColectivoMinAggregateInputType = {
    id?: true
    interno?: true
    id_linea?: true
  }

  export type ColectivoMaxAggregateInputType = {
    id?: true
    interno?: true
    id_linea?: true
  }

  export type ColectivoCountAggregateInputType = {
    id?: true
    interno?: true
    id_linea?: true
    _all?: true
  }

  export type ColectivoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colectivo to aggregate.
     */
    where?: ColectivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colectivos to fetch.
     */
    orderBy?: Enumerable<ColectivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColectivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colectivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colectivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colectivos
    **/
    _count?: true | ColectivoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColectivoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColectivoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColectivoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColectivoMaxAggregateInputType
  }

  export type GetColectivoAggregateType<T extends ColectivoAggregateArgs> = {
        [P in keyof T & keyof AggregateColectivo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColectivo[P]>
      : GetScalarType<T[P], AggregateColectivo[P]>
  }




  export type ColectivoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ColectivoWhereInput
    orderBy?: Enumerable<ColectivoOrderByWithAggregationInput>
    by: ColectivoScalarFieldEnum[]
    having?: ColectivoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColectivoCountAggregateInputType | true
    _avg?: ColectivoAvgAggregateInputType
    _sum?: ColectivoSumAggregateInputType
    _min?: ColectivoMinAggregateInputType
    _max?: ColectivoMaxAggregateInputType
  }


  export type ColectivoGroupByOutputType = {
    id: number
    interno: string
    id_linea: number
    _count: ColectivoCountAggregateOutputType | null
    _avg: ColectivoAvgAggregateOutputType | null
    _sum: ColectivoSumAggregateOutputType | null
    _min: ColectivoMinAggregateOutputType | null
    _max: ColectivoMaxAggregateOutputType | null
  }

  type GetColectivoGroupByPayload<T extends ColectivoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ColectivoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColectivoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColectivoGroupByOutputType[P]>
            : GetScalarType<T[P], ColectivoGroupByOutputType[P]>
        }
      >
    >


  export type ColectivoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    interno?: boolean
    id_linea?: boolean
    linea?: boolean | LineasArgs<ExtArgs>
  }, ExtArgs["result"]["colectivo"]>

  export type ColectivoSelectScalar = {
    id?: boolean
    interno?: boolean
    id_linea?: boolean
  }

  export type ColectivoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    linea?: boolean | LineasArgs<ExtArgs>
  }


  type ColectivoGetPayload<S extends boolean | null | undefined | ColectivoArgs> = $Types.GetResult<ColectivoPayload, S>

  type ColectivoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ColectivoFindManyArgs, 'select' | 'include'> & {
      select?: ColectivoCountAggregateInputType | true
    }

  export interface ColectivoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Colectivo'], meta: { name: 'Colectivo' } }
    /**
     * Find zero or one Colectivo that matches the filter.
     * @param {ColectivoFindUniqueArgs} args - Arguments to find a Colectivo
     * @example
     * // Get one Colectivo
     * const colectivo = await prisma.colectivo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ColectivoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ColectivoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Colectivo'> extends True ? Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Colectivo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ColectivoFindUniqueOrThrowArgs} args - Arguments to find a Colectivo
     * @example
     * // Get one Colectivo
     * const colectivo = await prisma.colectivo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ColectivoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColectivoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Colectivo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoFindFirstArgs} args - Arguments to find a Colectivo
     * @example
     * // Get one Colectivo
     * const colectivo = await prisma.colectivo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ColectivoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ColectivoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Colectivo'> extends True ? Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Colectivo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoFindFirstOrThrowArgs} args - Arguments to find a Colectivo
     * @example
     * // Get one Colectivo
     * const colectivo = await prisma.colectivo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ColectivoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColectivoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Colectivos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colectivos
     * const colectivos = await prisma.colectivo.findMany()
     * 
     * // Get first 10 Colectivos
     * const colectivos = await prisma.colectivo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colectivoWithIdOnly = await prisma.colectivo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ColectivoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColectivoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Colectivo.
     * @param {ColectivoCreateArgs} args - Arguments to create a Colectivo.
     * @example
     * // Create one Colectivo
     * const Colectivo = await prisma.colectivo.create({
     *   data: {
     *     // ... data to create a Colectivo
     *   }
     * })
     * 
    **/
    create<T extends ColectivoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ColectivoCreateArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Colectivos.
     *     @param {ColectivoCreateManyArgs} args - Arguments to create many Colectivos.
     *     @example
     *     // Create many Colectivos
     *     const colectivo = await prisma.colectivo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ColectivoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColectivoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Colectivo.
     * @param {ColectivoDeleteArgs} args - Arguments to delete one Colectivo.
     * @example
     * // Delete one Colectivo
     * const Colectivo = await prisma.colectivo.delete({
     *   where: {
     *     // ... filter to delete one Colectivo
     *   }
     * })
     * 
    **/
    delete<T extends ColectivoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ColectivoDeleteArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Colectivo.
     * @param {ColectivoUpdateArgs} args - Arguments to update one Colectivo.
     * @example
     * // Update one Colectivo
     * const colectivo = await prisma.colectivo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ColectivoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ColectivoUpdateArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Colectivos.
     * @param {ColectivoDeleteManyArgs} args - Arguments to filter Colectivos to delete.
     * @example
     * // Delete a few Colectivos
     * const { count } = await prisma.colectivo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ColectivoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColectivoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colectivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colectivos
     * const colectivo = await prisma.colectivo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ColectivoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ColectivoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colectivo.
     * @param {ColectivoUpsertArgs} args - Arguments to update or create a Colectivo.
     * @example
     * // Update or create a Colectivo
     * const colectivo = await prisma.colectivo.upsert({
     *   create: {
     *     // ... data to create a Colectivo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colectivo we want to update
     *   }
     * })
    **/
    upsert<T extends ColectivoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ColectivoUpsertArgs<ExtArgs>>
    ): Prisma__ColectivoClient<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Colectivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoCountArgs} args - Arguments to filter Colectivos to count.
     * @example
     * // Count the number of Colectivos
     * const count = await prisma.colectivo.count({
     *   where: {
     *     // ... the filter for the Colectivos we want to count
     *   }
     * })
    **/
    count<T extends ColectivoCountArgs>(
      args?: Subset<T, ColectivoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColectivoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colectivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColectivoAggregateArgs>(args: Subset<T, ColectivoAggregateArgs>): Prisma.PrismaPromise<GetColectivoAggregateType<T>>

    /**
     * Group by Colectivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColectivoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColectivoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColectivoGroupByArgs['orderBy'] }
        : { orderBy?: ColectivoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColectivoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColectivoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Colectivo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ColectivoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    linea<T extends LineasArgs<ExtArgs> = {}>(args?: Subset<T, LineasArgs<ExtArgs>>): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Colectivo base type for findUnique actions
   */
  export type ColectivoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter, which Colectivo to fetch.
     */
    where: ColectivoWhereUniqueInput
  }

  /**
   * Colectivo findUnique
   */
  export interface ColectivoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ColectivoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Colectivo findUniqueOrThrow
   */
  export type ColectivoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter, which Colectivo to fetch.
     */
    where: ColectivoWhereUniqueInput
  }


  /**
   * Colectivo base type for findFirst actions
   */
  export type ColectivoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter, which Colectivo to fetch.
     */
    where?: ColectivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colectivos to fetch.
     */
    orderBy?: Enumerable<ColectivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colectivos.
     */
    cursor?: ColectivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colectivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colectivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colectivos.
     */
    distinct?: Enumerable<ColectivoScalarFieldEnum>
  }

  /**
   * Colectivo findFirst
   */
  export interface ColectivoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ColectivoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Colectivo findFirstOrThrow
   */
  export type ColectivoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter, which Colectivo to fetch.
     */
    where?: ColectivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colectivos to fetch.
     */
    orderBy?: Enumerable<ColectivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colectivos.
     */
    cursor?: ColectivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colectivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colectivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colectivos.
     */
    distinct?: Enumerable<ColectivoScalarFieldEnum>
  }


  /**
   * Colectivo findMany
   */
  export type ColectivoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter, which Colectivos to fetch.
     */
    where?: ColectivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colectivos to fetch.
     */
    orderBy?: Enumerable<ColectivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colectivos.
     */
    cursor?: ColectivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colectivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colectivos.
     */
    skip?: number
    distinct?: Enumerable<ColectivoScalarFieldEnum>
  }


  /**
   * Colectivo create
   */
  export type ColectivoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * The data needed to create a Colectivo.
     */
    data: XOR<ColectivoCreateInput, ColectivoUncheckedCreateInput>
  }


  /**
   * Colectivo createMany
   */
  export type ColectivoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Colectivos.
     */
    data: Enumerable<ColectivoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Colectivo update
   */
  export type ColectivoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * The data needed to update a Colectivo.
     */
    data: XOR<ColectivoUpdateInput, ColectivoUncheckedUpdateInput>
    /**
     * Choose, which Colectivo to update.
     */
    where: ColectivoWhereUniqueInput
  }


  /**
   * Colectivo updateMany
   */
  export type ColectivoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colectivos.
     */
    data: XOR<ColectivoUpdateManyMutationInput, ColectivoUncheckedUpdateManyInput>
    /**
     * Filter which Colectivos to update
     */
    where?: ColectivoWhereInput
  }


  /**
   * Colectivo upsert
   */
  export type ColectivoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * The filter to search for the Colectivo to update in case it exists.
     */
    where: ColectivoWhereUniqueInput
    /**
     * In case the Colectivo found by the `where` argument doesn't exist, create a new Colectivo with this data.
     */
    create: XOR<ColectivoCreateInput, ColectivoUncheckedCreateInput>
    /**
     * In case the Colectivo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColectivoUpdateInput, ColectivoUncheckedUpdateInput>
  }


  /**
   * Colectivo delete
   */
  export type ColectivoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    /**
     * Filter which Colectivo to delete.
     */
    where: ColectivoWhereUniqueInput
  }


  /**
   * Colectivo deleteMany
   */
  export type ColectivoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colectivos to delete
     */
    where?: ColectivoWhereInput
  }


  /**
   * Colectivo without action
   */
  export type ColectivoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
  }



  /**
   * Model Paradas
   */


  export type AggregateParadas = {
    _count: ParadasCountAggregateOutputType | null
    _avg: ParadasAvgAggregateOutputType | null
    _sum: ParadasSumAggregateOutputType | null
    _min: ParadasMinAggregateOutputType | null
    _max: ParadasMaxAggregateOutputType | null
  }

  export type ParadasAvgAggregateOutputType = {
    id: number | null
    id_linea: number | null
  }

  export type ParadasSumAggregateOutputType = {
    id: number | null
    id_linea: number | null
  }

  export type ParadasMinAggregateOutputType = {
    id: number | null
    latitud: string | null
    longitud: string | null
    id_linea: number | null
    direccion: string | null
  }

  export type ParadasMaxAggregateOutputType = {
    id: number | null
    latitud: string | null
    longitud: string | null
    id_linea: number | null
    direccion: string | null
  }

  export type ParadasCountAggregateOutputType = {
    id: number
    latitud: number
    longitud: number
    id_linea: number
    direccion: number
    _all: number
  }


  export type ParadasAvgAggregateInputType = {
    id?: true
    id_linea?: true
  }

  export type ParadasSumAggregateInputType = {
    id?: true
    id_linea?: true
  }

  export type ParadasMinAggregateInputType = {
    id?: true
    latitud?: true
    longitud?: true
    id_linea?: true
    direccion?: true
  }

  export type ParadasMaxAggregateInputType = {
    id?: true
    latitud?: true
    longitud?: true
    id_linea?: true
    direccion?: true
  }

  export type ParadasCountAggregateInputType = {
    id?: true
    latitud?: true
    longitud?: true
    id_linea?: true
    direccion?: true
    _all?: true
  }

  export type ParadasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paradas to aggregate.
     */
    where?: ParadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paradas to fetch.
     */
    orderBy?: Enumerable<ParadasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paradas
    **/
    _count?: true | ParadasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParadasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParadasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParadasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParadasMaxAggregateInputType
  }

  export type GetParadasAggregateType<T extends ParadasAggregateArgs> = {
        [P in keyof T & keyof AggregateParadas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParadas[P]>
      : GetScalarType<T[P], AggregateParadas[P]>
  }




  export type ParadasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParadasWhereInput
    orderBy?: Enumerable<ParadasOrderByWithAggregationInput>
    by: ParadasScalarFieldEnum[]
    having?: ParadasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParadasCountAggregateInputType | true
    _avg?: ParadasAvgAggregateInputType
    _sum?: ParadasSumAggregateInputType
    _min?: ParadasMinAggregateInputType
    _max?: ParadasMaxAggregateInputType
  }


  export type ParadasGroupByOutputType = {
    id: number
    latitud: string
    longitud: string
    id_linea: number
    direccion: string
    _count: ParadasCountAggregateOutputType | null
    _avg: ParadasAvgAggregateOutputType | null
    _sum: ParadasSumAggregateOutputType | null
    _min: ParadasMinAggregateOutputType | null
    _max: ParadasMaxAggregateOutputType | null
  }

  type GetParadasGroupByPayload<T extends ParadasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ParadasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParadasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParadasGroupByOutputType[P]>
            : GetScalarType<T[P], ParadasGroupByOutputType[P]>
        }
      >
    >


  export type ParadasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitud?: boolean
    longitud?: boolean
    id_linea?: boolean
    direccion?: boolean
    linea?: boolean | LineasArgs<ExtArgs>
    solicitudes?: boolean | Paradas$solicitudesArgs<ExtArgs>
    _count?: boolean | ParadasCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["paradas"]>

  export type ParadasSelectScalar = {
    id?: boolean
    latitud?: boolean
    longitud?: boolean
    id_linea?: boolean
    direccion?: boolean
  }

  export type ParadasInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    linea?: boolean | LineasArgs<ExtArgs>
    solicitudes?: boolean | Paradas$solicitudesArgs<ExtArgs>
    _count?: boolean | ParadasCountOutputTypeArgs<ExtArgs>
  }


  type ParadasGetPayload<S extends boolean | null | undefined | ParadasArgs> = $Types.GetResult<ParadasPayload, S>

  type ParadasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ParadasFindManyArgs, 'select' | 'include'> & {
      select?: ParadasCountAggregateInputType | true
    }

  export interface ParadasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paradas'], meta: { name: 'Paradas' } }
    /**
     * Find zero or one Paradas that matches the filter.
     * @param {ParadasFindUniqueArgs} args - Arguments to find a Paradas
     * @example
     * // Get one Paradas
     * const paradas = await prisma.paradas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParadasFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParadasFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Paradas'> extends True ? Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Paradas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParadasFindUniqueOrThrowArgs} args - Arguments to find a Paradas
     * @example
     * // Get one Paradas
     * const paradas = await prisma.paradas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParadasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParadasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Paradas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasFindFirstArgs} args - Arguments to find a Paradas
     * @example
     * // Get one Paradas
     * const paradas = await prisma.paradas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParadasFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParadasFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Paradas'> extends True ? Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Paradas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasFindFirstOrThrowArgs} args - Arguments to find a Paradas
     * @example
     * // Get one Paradas
     * const paradas = await prisma.paradas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParadasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParadasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Paradas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paradas
     * const paradas = await prisma.paradas.findMany()
     * 
     * // Get first 10 Paradas
     * const paradas = await prisma.paradas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paradasWithIdOnly = await prisma.paradas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParadasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParadasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Paradas.
     * @param {ParadasCreateArgs} args - Arguments to create a Paradas.
     * @example
     * // Create one Paradas
     * const Paradas = await prisma.paradas.create({
     *   data: {
     *     // ... data to create a Paradas
     *   }
     * })
     * 
    **/
    create<T extends ParadasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParadasCreateArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Paradas.
     *     @param {ParadasCreateManyArgs} args - Arguments to create many Paradas.
     *     @example
     *     // Create many Paradas
     *     const paradas = await prisma.paradas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParadasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParadasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paradas.
     * @param {ParadasDeleteArgs} args - Arguments to delete one Paradas.
     * @example
     * // Delete one Paradas
     * const Paradas = await prisma.paradas.delete({
     *   where: {
     *     // ... filter to delete one Paradas
     *   }
     * })
     * 
    **/
    delete<T extends ParadasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParadasDeleteArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Paradas.
     * @param {ParadasUpdateArgs} args - Arguments to update one Paradas.
     * @example
     * // Update one Paradas
     * const paradas = await prisma.paradas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParadasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParadasUpdateArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Paradas.
     * @param {ParadasDeleteManyArgs} args - Arguments to filter Paradas to delete.
     * @example
     * // Delete a few Paradas
     * const { count } = await prisma.paradas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParadasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParadasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paradas
     * const paradas = await prisma.paradas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParadasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParadasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paradas.
     * @param {ParadasUpsertArgs} args - Arguments to update or create a Paradas.
     * @example
     * // Update or create a Paradas
     * const paradas = await prisma.paradas.upsert({
     *   create: {
     *     // ... data to create a Paradas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paradas we want to update
     *   }
     * })
    **/
    upsert<T extends ParadasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParadasUpsertArgs<ExtArgs>>
    ): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Paradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasCountArgs} args - Arguments to filter Paradas to count.
     * @example
     * // Count the number of Paradas
     * const count = await prisma.paradas.count({
     *   where: {
     *     // ... the filter for the Paradas we want to count
     *   }
     * })
    **/
    count<T extends ParadasCountArgs>(
      args?: Subset<T, ParadasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParadasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParadasAggregateArgs>(args: Subset<T, ParadasAggregateArgs>): Prisma.PrismaPromise<GetParadasAggregateType<T>>

    /**
     * Group by Paradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParadasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParadasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParadasGroupByArgs['orderBy'] }
        : { orderBy?: ParadasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParadasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParadasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Paradas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParadasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    linea<T extends LineasArgs<ExtArgs> = {}>(args?: Subset<T, LineasArgs<ExtArgs>>): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    solicitudes<T extends Paradas$solicitudesArgs<ExtArgs> = {}>(args?: Subset<T, Paradas$solicitudesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Paradas base type for findUnique actions
   */
  export type ParadasFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter, which Paradas to fetch.
     */
    where: ParadasWhereUniqueInput
  }

  /**
   * Paradas findUnique
   */
  export interface ParadasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParadasFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Paradas findUniqueOrThrow
   */
  export type ParadasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter, which Paradas to fetch.
     */
    where: ParadasWhereUniqueInput
  }


  /**
   * Paradas base type for findFirst actions
   */
  export type ParadasFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter, which Paradas to fetch.
     */
    where?: ParadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paradas to fetch.
     */
    orderBy?: Enumerable<ParadasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paradas.
     */
    cursor?: ParadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paradas.
     */
    distinct?: Enumerable<ParadasScalarFieldEnum>
  }

  /**
   * Paradas findFirst
   */
  export interface ParadasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParadasFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Paradas findFirstOrThrow
   */
  export type ParadasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter, which Paradas to fetch.
     */
    where?: ParadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paradas to fetch.
     */
    orderBy?: Enumerable<ParadasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paradas.
     */
    cursor?: ParadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paradas.
     */
    distinct?: Enumerable<ParadasScalarFieldEnum>
  }


  /**
   * Paradas findMany
   */
  export type ParadasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter, which Paradas to fetch.
     */
    where?: ParadasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paradas to fetch.
     */
    orderBy?: Enumerable<ParadasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paradas.
     */
    cursor?: ParadasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paradas.
     */
    skip?: number
    distinct?: Enumerable<ParadasScalarFieldEnum>
  }


  /**
   * Paradas create
   */
  export type ParadasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * The data needed to create a Paradas.
     */
    data: XOR<ParadasCreateInput, ParadasUncheckedCreateInput>
  }


  /**
   * Paradas createMany
   */
  export type ParadasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paradas.
     */
    data: Enumerable<ParadasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Paradas update
   */
  export type ParadasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * The data needed to update a Paradas.
     */
    data: XOR<ParadasUpdateInput, ParadasUncheckedUpdateInput>
    /**
     * Choose, which Paradas to update.
     */
    where: ParadasWhereUniqueInput
  }


  /**
   * Paradas updateMany
   */
  export type ParadasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paradas.
     */
    data: XOR<ParadasUpdateManyMutationInput, ParadasUncheckedUpdateManyInput>
    /**
     * Filter which Paradas to update
     */
    where?: ParadasWhereInput
  }


  /**
   * Paradas upsert
   */
  export type ParadasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * The filter to search for the Paradas to update in case it exists.
     */
    where: ParadasWhereUniqueInput
    /**
     * In case the Paradas found by the `where` argument doesn't exist, create a new Paradas with this data.
     */
    create: XOR<ParadasCreateInput, ParadasUncheckedCreateInput>
    /**
     * In case the Paradas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParadasUpdateInput, ParadasUncheckedUpdateInput>
  }


  /**
   * Paradas delete
   */
  export type ParadasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    /**
     * Filter which Paradas to delete.
     */
    where: ParadasWhereUniqueInput
  }


  /**
   * Paradas deleteMany
   */
  export type ParadasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paradas to delete
     */
    where?: ParadasWhereInput
  }


  /**
   * Paradas.solicitudes
   */
  export type Paradas$solicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    where?: SolicitudesWhereInput
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    cursor?: SolicitudesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }


  /**
   * Paradas without action
   */
  export type ParadasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
  }



  /**
   * Model Solicitudes
   */


  export type AggregateSolicitudes = {
    _count: SolicitudesCountAggregateOutputType | null
    _avg: SolicitudesAvgAggregateOutputType | null
    _sum: SolicitudesSumAggregateOutputType | null
    _min: SolicitudesMinAggregateOutputType | null
    _max: SolicitudesMaxAggregateOutputType | null
  }

  export type SolicitudesAvgAggregateOutputType = {
    id: number | null
    id_usuario: number | null
    id_linea: number | null
    paradaDestino: number | null
    paradaInicio: number | null
  }

  export type SolicitudesSumAggregateOutputType = {
    id: number | null
    id_usuario: number | null
    id_linea: number | null
    paradaDestino: number | null
    paradaInicio: number | null
  }

  export type SolicitudesMinAggregateOutputType = {
    id: number | null
    id_usuario: number | null
    id_linea: number | null
    paradaDestino: number | null
    paradaInicio: number | null
  }

  export type SolicitudesMaxAggregateOutputType = {
    id: number | null
    id_usuario: number | null
    id_linea: number | null
    paradaDestino: number | null
    paradaInicio: number | null
  }

  export type SolicitudesCountAggregateOutputType = {
    id: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
    _all: number
  }


  export type SolicitudesAvgAggregateInputType = {
    id?: true
    id_usuario?: true
    id_linea?: true
    paradaDestino?: true
    paradaInicio?: true
  }

  export type SolicitudesSumAggregateInputType = {
    id?: true
    id_usuario?: true
    id_linea?: true
    paradaDestino?: true
    paradaInicio?: true
  }

  export type SolicitudesMinAggregateInputType = {
    id?: true
    id_usuario?: true
    id_linea?: true
    paradaDestino?: true
    paradaInicio?: true
  }

  export type SolicitudesMaxAggregateInputType = {
    id?: true
    id_usuario?: true
    id_linea?: true
    paradaDestino?: true
    paradaInicio?: true
  }

  export type SolicitudesCountAggregateInputType = {
    id?: true
    id_usuario?: true
    id_linea?: true
    paradaDestino?: true
    paradaInicio?: true
    _all?: true
  }

  export type SolicitudesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solicitudes to aggregate.
     */
    where?: SolicitudesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solicitudes to fetch.
     */
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SolicitudesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solicitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solicitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Solicitudes
    **/
    _count?: true | SolicitudesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SolicitudesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SolicitudesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolicitudesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolicitudesMaxAggregateInputType
  }

  export type GetSolicitudesAggregateType<T extends SolicitudesAggregateArgs> = {
        [P in keyof T & keyof AggregateSolicitudes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolicitudes[P]>
      : GetScalarType<T[P], AggregateSolicitudes[P]>
  }




  export type SolicitudesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SolicitudesWhereInput
    orderBy?: Enumerable<SolicitudesOrderByWithAggregationInput>
    by: SolicitudesScalarFieldEnum[]
    having?: SolicitudesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolicitudesCountAggregateInputType | true
    _avg?: SolicitudesAvgAggregateInputType
    _sum?: SolicitudesSumAggregateInputType
    _min?: SolicitudesMinAggregateInputType
    _max?: SolicitudesMaxAggregateInputType
  }


  export type SolicitudesGroupByOutputType = {
    id: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
    _count: SolicitudesCountAggregateOutputType | null
    _avg: SolicitudesAvgAggregateOutputType | null
    _sum: SolicitudesSumAggregateOutputType | null
    _min: SolicitudesMinAggregateOutputType | null
    _max: SolicitudesMaxAggregateOutputType | null
  }

  type GetSolicitudesGroupByPayload<T extends SolicitudesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SolicitudesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolicitudesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolicitudesGroupByOutputType[P]>
            : GetScalarType<T[P], SolicitudesGroupByOutputType[P]>
        }
      >
    >


  export type SolicitudesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_usuario?: boolean
    id_linea?: boolean
    paradaDestino?: boolean
    paradaInicio?: boolean
    parada?: boolean | ParadasArgs<ExtArgs>
    usuario?: boolean | UsuariosArgs<ExtArgs>
    linea?: boolean | LineasArgs<ExtArgs>
  }, ExtArgs["result"]["solicitudes"]>

  export type SolicitudesSelectScalar = {
    id?: boolean
    id_usuario?: boolean
    id_linea?: boolean
    paradaDestino?: boolean
    paradaInicio?: boolean
  }

  export type SolicitudesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    parada?: boolean | ParadasArgs<ExtArgs>
    usuario?: boolean | UsuariosArgs<ExtArgs>
    linea?: boolean | LineasArgs<ExtArgs>
  }


  type SolicitudesGetPayload<S extends boolean | null | undefined | SolicitudesArgs> = $Types.GetResult<SolicitudesPayload, S>

  type SolicitudesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SolicitudesFindManyArgs, 'select' | 'include'> & {
      select?: SolicitudesCountAggregateInputType | true
    }

  export interface SolicitudesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Solicitudes'], meta: { name: 'Solicitudes' } }
    /**
     * Find zero or one Solicitudes that matches the filter.
     * @param {SolicitudesFindUniqueArgs} args - Arguments to find a Solicitudes
     * @example
     * // Get one Solicitudes
     * const solicitudes = await prisma.solicitudes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SolicitudesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SolicitudesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Solicitudes'> extends True ? Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Solicitudes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SolicitudesFindUniqueOrThrowArgs} args - Arguments to find a Solicitudes
     * @example
     * // Get one Solicitudes
     * const solicitudes = await prisma.solicitudes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SolicitudesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SolicitudesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Solicitudes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesFindFirstArgs} args - Arguments to find a Solicitudes
     * @example
     * // Get one Solicitudes
     * const solicitudes = await prisma.solicitudes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SolicitudesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SolicitudesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Solicitudes'> extends True ? Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Solicitudes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesFindFirstOrThrowArgs} args - Arguments to find a Solicitudes
     * @example
     * // Get one Solicitudes
     * const solicitudes = await prisma.solicitudes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SolicitudesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SolicitudesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Solicitudes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Solicitudes
     * const solicitudes = await prisma.solicitudes.findMany()
     * 
     * // Get first 10 Solicitudes
     * const solicitudes = await prisma.solicitudes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solicitudesWithIdOnly = await prisma.solicitudes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SolicitudesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SolicitudesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Solicitudes.
     * @param {SolicitudesCreateArgs} args - Arguments to create a Solicitudes.
     * @example
     * // Create one Solicitudes
     * const Solicitudes = await prisma.solicitudes.create({
     *   data: {
     *     // ... data to create a Solicitudes
     *   }
     * })
     * 
    **/
    create<T extends SolicitudesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SolicitudesCreateArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Solicitudes.
     *     @param {SolicitudesCreateManyArgs} args - Arguments to create many Solicitudes.
     *     @example
     *     // Create many Solicitudes
     *     const solicitudes = await prisma.solicitudes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SolicitudesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SolicitudesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Solicitudes.
     * @param {SolicitudesDeleteArgs} args - Arguments to delete one Solicitudes.
     * @example
     * // Delete one Solicitudes
     * const Solicitudes = await prisma.solicitudes.delete({
     *   where: {
     *     // ... filter to delete one Solicitudes
     *   }
     * })
     * 
    **/
    delete<T extends SolicitudesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SolicitudesDeleteArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Solicitudes.
     * @param {SolicitudesUpdateArgs} args - Arguments to update one Solicitudes.
     * @example
     * // Update one Solicitudes
     * const solicitudes = await prisma.solicitudes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SolicitudesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SolicitudesUpdateArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Solicitudes.
     * @param {SolicitudesDeleteManyArgs} args - Arguments to filter Solicitudes to delete.
     * @example
     * // Delete a few Solicitudes
     * const { count } = await prisma.solicitudes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SolicitudesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SolicitudesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Solicitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Solicitudes
     * const solicitudes = await prisma.solicitudes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SolicitudesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SolicitudesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Solicitudes.
     * @param {SolicitudesUpsertArgs} args - Arguments to update or create a Solicitudes.
     * @example
     * // Update or create a Solicitudes
     * const solicitudes = await prisma.solicitudes.upsert({
     *   create: {
     *     // ... data to create a Solicitudes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Solicitudes we want to update
     *   }
     * })
    **/
    upsert<T extends SolicitudesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SolicitudesUpsertArgs<ExtArgs>>
    ): Prisma__SolicitudesClient<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Solicitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesCountArgs} args - Arguments to filter Solicitudes to count.
     * @example
     * // Count the number of Solicitudes
     * const count = await prisma.solicitudes.count({
     *   where: {
     *     // ... the filter for the Solicitudes we want to count
     *   }
     * })
    **/
    count<T extends SolicitudesCountArgs>(
      args?: Subset<T, SolicitudesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolicitudesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Solicitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolicitudesAggregateArgs>(args: Subset<T, SolicitudesAggregateArgs>): Prisma.PrismaPromise<GetSolicitudesAggregateType<T>>

    /**
     * Group by Solicitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolicitudesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolicitudesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolicitudesGroupByArgs['orderBy'] }
        : { orderBy?: SolicitudesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolicitudesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolicitudesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Solicitudes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SolicitudesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    parada<T extends ParadasArgs<ExtArgs> = {}>(args?: Subset<T, ParadasArgs<ExtArgs>>): Prisma__ParadasClient<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    usuario<T extends UsuariosArgs<ExtArgs> = {}>(args?: Subset<T, UsuariosArgs<ExtArgs>>): Prisma__UsuariosClient<$Types.GetResult<UsuariosPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    linea<T extends LineasArgs<ExtArgs> = {}>(args?: Subset<T, LineasArgs<ExtArgs>>): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Solicitudes base type for findUnique actions
   */
  export type SolicitudesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter, which Solicitudes to fetch.
     */
    where: SolicitudesWhereUniqueInput
  }

  /**
   * Solicitudes findUnique
   */
  export interface SolicitudesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SolicitudesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Solicitudes findUniqueOrThrow
   */
  export type SolicitudesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter, which Solicitudes to fetch.
     */
    where: SolicitudesWhereUniqueInput
  }


  /**
   * Solicitudes base type for findFirst actions
   */
  export type SolicitudesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter, which Solicitudes to fetch.
     */
    where?: SolicitudesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solicitudes to fetch.
     */
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solicitudes.
     */
    cursor?: SolicitudesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solicitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solicitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solicitudes.
     */
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }

  /**
   * Solicitudes findFirst
   */
  export interface SolicitudesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SolicitudesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Solicitudes findFirstOrThrow
   */
  export type SolicitudesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter, which Solicitudes to fetch.
     */
    where?: SolicitudesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solicitudes to fetch.
     */
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solicitudes.
     */
    cursor?: SolicitudesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solicitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solicitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solicitudes.
     */
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }


  /**
   * Solicitudes findMany
   */
  export type SolicitudesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter, which Solicitudes to fetch.
     */
    where?: SolicitudesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solicitudes to fetch.
     */
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Solicitudes.
     */
    cursor?: SolicitudesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solicitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solicitudes.
     */
    skip?: number
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }


  /**
   * Solicitudes create
   */
  export type SolicitudesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * The data needed to create a Solicitudes.
     */
    data: XOR<SolicitudesCreateInput, SolicitudesUncheckedCreateInput>
  }


  /**
   * Solicitudes createMany
   */
  export type SolicitudesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Solicitudes.
     */
    data: Enumerable<SolicitudesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Solicitudes update
   */
  export type SolicitudesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * The data needed to update a Solicitudes.
     */
    data: XOR<SolicitudesUpdateInput, SolicitudesUncheckedUpdateInput>
    /**
     * Choose, which Solicitudes to update.
     */
    where: SolicitudesWhereUniqueInput
  }


  /**
   * Solicitudes updateMany
   */
  export type SolicitudesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Solicitudes.
     */
    data: XOR<SolicitudesUpdateManyMutationInput, SolicitudesUncheckedUpdateManyInput>
    /**
     * Filter which Solicitudes to update
     */
    where?: SolicitudesWhereInput
  }


  /**
   * Solicitudes upsert
   */
  export type SolicitudesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * The filter to search for the Solicitudes to update in case it exists.
     */
    where: SolicitudesWhereUniqueInput
    /**
     * In case the Solicitudes found by the `where` argument doesn't exist, create a new Solicitudes with this data.
     */
    create: XOR<SolicitudesCreateInput, SolicitudesUncheckedCreateInput>
    /**
     * In case the Solicitudes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SolicitudesUpdateInput, SolicitudesUncheckedUpdateInput>
  }


  /**
   * Solicitudes delete
   */
  export type SolicitudesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    /**
     * Filter which Solicitudes to delete.
     */
    where: SolicitudesWhereUniqueInput
  }


  /**
   * Solicitudes deleteMany
   */
  export type SolicitudesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solicitudes to delete
     */
    where?: SolicitudesWhereInput
  }


  /**
   * Solicitudes without action
   */
  export type SolicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
  }



  /**
   * Model Lineas
   */


  export type AggregateLineas = {
    _count: LineasCountAggregateOutputType | null
    _avg: LineasAvgAggregateOutputType | null
    _sum: LineasSumAggregateOutputType | null
    _min: LineasMinAggregateOutputType | null
    _max: LineasMaxAggregateOutputType | null
  }

  export type LineasAvgAggregateOutputType = {
    id: number | null
  }

  export type LineasSumAggregateOutputType = {
    id: number | null
  }

  export type LineasMinAggregateOutputType = {
    id: number | null
    linea: string | null
  }

  export type LineasMaxAggregateOutputType = {
    id: number | null
    linea: string | null
  }

  export type LineasCountAggregateOutputType = {
    id: number
    linea: number
    _all: number
  }


  export type LineasAvgAggregateInputType = {
    id?: true
  }

  export type LineasSumAggregateInputType = {
    id?: true
  }

  export type LineasMinAggregateInputType = {
    id?: true
    linea?: true
  }

  export type LineasMaxAggregateInputType = {
    id?: true
    linea?: true
  }

  export type LineasCountAggregateInputType = {
    id?: true
    linea?: true
    _all?: true
  }

  export type LineasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lineas to aggregate.
     */
    where?: LineasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lineas to fetch.
     */
    orderBy?: Enumerable<LineasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LineasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lineas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lineas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lineas
    **/
    _count?: true | LineasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LineasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LineasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LineasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LineasMaxAggregateInputType
  }

  export type GetLineasAggregateType<T extends LineasAggregateArgs> = {
        [P in keyof T & keyof AggregateLineas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLineas[P]>
      : GetScalarType<T[P], AggregateLineas[P]>
  }




  export type LineasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LineasWhereInput
    orderBy?: Enumerable<LineasOrderByWithAggregationInput>
    by: LineasScalarFieldEnum[]
    having?: LineasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LineasCountAggregateInputType | true
    _avg?: LineasAvgAggregateInputType
    _sum?: LineasSumAggregateInputType
    _min?: LineasMinAggregateInputType
    _max?: LineasMaxAggregateInputType
  }


  export type LineasGroupByOutputType = {
    id: number
    linea: string
    _count: LineasCountAggregateOutputType | null
    _avg: LineasAvgAggregateOutputType | null
    _sum: LineasSumAggregateOutputType | null
    _min: LineasMinAggregateOutputType | null
    _max: LineasMaxAggregateOutputType | null
  }

  type GetLineasGroupByPayload<T extends LineasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LineasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LineasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LineasGroupByOutputType[P]>
            : GetScalarType<T[P], LineasGroupByOutputType[P]>
        }
      >
    >


  export type LineasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    linea?: boolean
    paradas?: boolean | Lineas$paradasArgs<ExtArgs>
    colectivos?: boolean | Lineas$colectivosArgs<ExtArgs>
    solicitudes?: boolean | Lineas$solicitudesArgs<ExtArgs>
    _count?: boolean | LineasCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["lineas"]>

  export type LineasSelectScalar = {
    id?: boolean
    linea?: boolean
  }

  export type LineasInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    paradas?: boolean | Lineas$paradasArgs<ExtArgs>
    colectivos?: boolean | Lineas$colectivosArgs<ExtArgs>
    solicitudes?: boolean | Lineas$solicitudesArgs<ExtArgs>
    _count?: boolean | LineasCountOutputTypeArgs<ExtArgs>
  }


  type LineasGetPayload<S extends boolean | null | undefined | LineasArgs> = $Types.GetResult<LineasPayload, S>

  type LineasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LineasFindManyArgs, 'select' | 'include'> & {
      select?: LineasCountAggregateInputType | true
    }

  export interface LineasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lineas'], meta: { name: 'Lineas' } }
    /**
     * Find zero or one Lineas that matches the filter.
     * @param {LineasFindUniqueArgs} args - Arguments to find a Lineas
     * @example
     * // Get one Lineas
     * const lineas = await prisma.lineas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LineasFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LineasFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Lineas'> extends True ? Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Lineas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LineasFindUniqueOrThrowArgs} args - Arguments to find a Lineas
     * @example
     * // Get one Lineas
     * const lineas = await prisma.lineas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LineasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LineasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Lineas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasFindFirstArgs} args - Arguments to find a Lineas
     * @example
     * // Get one Lineas
     * const lineas = await prisma.lineas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LineasFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LineasFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Lineas'> extends True ? Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Lineas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasFindFirstOrThrowArgs} args - Arguments to find a Lineas
     * @example
     * // Get one Lineas
     * const lineas = await prisma.lineas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LineasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LineasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Lineas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lineas
     * const lineas = await prisma.lineas.findMany()
     * 
     * // Get first 10 Lineas
     * const lineas = await prisma.lineas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lineasWithIdOnly = await prisma.lineas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LineasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LineasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<LineasPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Lineas.
     * @param {LineasCreateArgs} args - Arguments to create a Lineas.
     * @example
     * // Create one Lineas
     * const Lineas = await prisma.lineas.create({
     *   data: {
     *     // ... data to create a Lineas
     *   }
     * })
     * 
    **/
    create<T extends LineasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LineasCreateArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Lineas.
     *     @param {LineasCreateManyArgs} args - Arguments to create many Lineas.
     *     @example
     *     // Create many Lineas
     *     const lineas = await prisma.lineas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LineasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LineasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lineas.
     * @param {LineasDeleteArgs} args - Arguments to delete one Lineas.
     * @example
     * // Delete one Lineas
     * const Lineas = await prisma.lineas.delete({
     *   where: {
     *     // ... filter to delete one Lineas
     *   }
     * })
     * 
    **/
    delete<T extends LineasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LineasDeleteArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Lineas.
     * @param {LineasUpdateArgs} args - Arguments to update one Lineas.
     * @example
     * // Update one Lineas
     * const lineas = await prisma.lineas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LineasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LineasUpdateArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Lineas.
     * @param {LineasDeleteManyArgs} args - Arguments to filter Lineas to delete.
     * @example
     * // Delete a few Lineas
     * const { count } = await prisma.lineas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LineasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LineasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lineas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lineas
     * const lineas = await prisma.lineas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LineasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LineasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lineas.
     * @param {LineasUpsertArgs} args - Arguments to update or create a Lineas.
     * @example
     * // Update or create a Lineas
     * const lineas = await prisma.lineas.upsert({
     *   create: {
     *     // ... data to create a Lineas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lineas we want to update
     *   }
     * })
    **/
    upsert<T extends LineasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LineasUpsertArgs<ExtArgs>>
    ): Prisma__LineasClient<$Types.GetResult<LineasPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Lineas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasCountArgs} args - Arguments to filter Lineas to count.
     * @example
     * // Count the number of Lineas
     * const count = await prisma.lineas.count({
     *   where: {
     *     // ... the filter for the Lineas we want to count
     *   }
     * })
    **/
    count<T extends LineasCountArgs>(
      args?: Subset<T, LineasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LineasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lineas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LineasAggregateArgs>(args: Subset<T, LineasAggregateArgs>): Prisma.PrismaPromise<GetLineasAggregateType<T>>

    /**
     * Group by Lineas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LineasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LineasGroupByArgs['orderBy'] }
        : { orderBy?: LineasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LineasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLineasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Lineas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LineasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    paradas<T extends Lineas$paradasArgs<ExtArgs> = {}>(args?: Subset<T, Lineas$paradasArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ParadasPayload<ExtArgs>, T, 'findMany', never>| Null>;

    colectivos<T extends Lineas$colectivosArgs<ExtArgs> = {}>(args?: Subset<T, Lineas$colectivosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ColectivoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    solicitudes<T extends Lineas$solicitudesArgs<ExtArgs> = {}>(args?: Subset<T, Lineas$solicitudesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SolicitudesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Lineas base type for findUnique actions
   */
  export type LineasFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter, which Lineas to fetch.
     */
    where: LineasWhereUniqueInput
  }

  /**
   * Lineas findUnique
   */
  export interface LineasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LineasFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lineas findUniqueOrThrow
   */
  export type LineasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter, which Lineas to fetch.
     */
    where: LineasWhereUniqueInput
  }


  /**
   * Lineas base type for findFirst actions
   */
  export type LineasFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter, which Lineas to fetch.
     */
    where?: LineasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lineas to fetch.
     */
    orderBy?: Enumerable<LineasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lineas.
     */
    cursor?: LineasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lineas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lineas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lineas.
     */
    distinct?: Enumerable<LineasScalarFieldEnum>
  }

  /**
   * Lineas findFirst
   */
  export interface LineasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LineasFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lineas findFirstOrThrow
   */
  export type LineasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter, which Lineas to fetch.
     */
    where?: LineasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lineas to fetch.
     */
    orderBy?: Enumerable<LineasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lineas.
     */
    cursor?: LineasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lineas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lineas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lineas.
     */
    distinct?: Enumerable<LineasScalarFieldEnum>
  }


  /**
   * Lineas findMany
   */
  export type LineasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter, which Lineas to fetch.
     */
    where?: LineasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lineas to fetch.
     */
    orderBy?: Enumerable<LineasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lineas.
     */
    cursor?: LineasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lineas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lineas.
     */
    skip?: number
    distinct?: Enumerable<LineasScalarFieldEnum>
  }


  /**
   * Lineas create
   */
  export type LineasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * The data needed to create a Lineas.
     */
    data: XOR<LineasCreateInput, LineasUncheckedCreateInput>
  }


  /**
   * Lineas createMany
   */
  export type LineasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lineas.
     */
    data: Enumerable<LineasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Lineas update
   */
  export type LineasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * The data needed to update a Lineas.
     */
    data: XOR<LineasUpdateInput, LineasUncheckedUpdateInput>
    /**
     * Choose, which Lineas to update.
     */
    where: LineasWhereUniqueInput
  }


  /**
   * Lineas updateMany
   */
  export type LineasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lineas.
     */
    data: XOR<LineasUpdateManyMutationInput, LineasUncheckedUpdateManyInput>
    /**
     * Filter which Lineas to update
     */
    where?: LineasWhereInput
  }


  /**
   * Lineas upsert
   */
  export type LineasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * The filter to search for the Lineas to update in case it exists.
     */
    where: LineasWhereUniqueInput
    /**
     * In case the Lineas found by the `where` argument doesn't exist, create a new Lineas with this data.
     */
    create: XOR<LineasCreateInput, LineasUncheckedCreateInput>
    /**
     * In case the Lineas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LineasUpdateInput, LineasUncheckedUpdateInput>
  }


  /**
   * Lineas delete
   */
  export type LineasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
    /**
     * Filter which Lineas to delete.
     */
    where: LineasWhereUniqueInput
  }


  /**
   * Lineas deleteMany
   */
  export type LineasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lineas to delete
     */
    where?: LineasWhereInput
  }


  /**
   * Lineas.paradas
   */
  export type Lineas$paradasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paradas
     */
    select?: ParadasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParadasInclude<ExtArgs> | null
    where?: ParadasWhereInput
    orderBy?: Enumerable<ParadasOrderByWithRelationInput>
    cursor?: ParadasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ParadasScalarFieldEnum>
  }


  /**
   * Lineas.colectivos
   */
  export type Lineas$colectivosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colectivo
     */
    select?: ColectivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColectivoInclude<ExtArgs> | null
    where?: ColectivoWhereInput
    orderBy?: Enumerable<ColectivoOrderByWithRelationInput>
    cursor?: ColectivoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ColectivoScalarFieldEnum>
  }


  /**
   * Lineas.solicitudes
   */
  export type Lineas$solicitudesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solicitudes
     */
    select?: SolicitudesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SolicitudesInclude<ExtArgs> | null
    where?: SolicitudesWhereInput
    orderBy?: Enumerable<SolicitudesOrderByWithRelationInput>
    cursor?: SolicitudesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SolicitudesScalarFieldEnum>
  }


  /**
   * Lineas without action
   */
  export type LineasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lineas
     */
    select?: LineasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LineasInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nombreapellido: 'nombreapellido',
    email: 'email',
    password: 'password'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const ColectivoScalarFieldEnum: {
    id: 'id',
    interno: 'interno',
    id_linea: 'id_linea'
  };

  export type ColectivoScalarFieldEnum = (typeof ColectivoScalarFieldEnum)[keyof typeof ColectivoScalarFieldEnum]


  export const ParadasScalarFieldEnum: {
    id: 'id',
    latitud: 'latitud',
    longitud: 'longitud',
    id_linea: 'id_linea',
    direccion: 'direccion'
  };

  export type ParadasScalarFieldEnum = (typeof ParadasScalarFieldEnum)[keyof typeof ParadasScalarFieldEnum]


  export const SolicitudesScalarFieldEnum: {
    id: 'id',
    id_usuario: 'id_usuario',
    id_linea: 'id_linea',
    paradaDestino: 'paradaDestino',
    paradaInicio: 'paradaInicio'
  };

  export type SolicitudesScalarFieldEnum = (typeof SolicitudesScalarFieldEnum)[keyof typeof SolicitudesScalarFieldEnum]


  export const LineasScalarFieldEnum: {
    id: 'id',
    linea: 'linea'
  };

  export type LineasScalarFieldEnum = (typeof LineasScalarFieldEnum)[keyof typeof LineasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UsuariosWhereInput = {
    AND?: Enumerable<UsuariosWhereInput>
    OR?: Enumerable<UsuariosWhereInput>
    NOT?: Enumerable<UsuariosWhereInput>
    id?: IntFilter | number
    nombreapellido?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    solicitudes?: SolicitudesListRelationFilter
  }

  export type UsuariosOrderByWithRelationInput = {
    id?: SortOrder
    nombreapellido?: SortOrder
    email?: SortOrder
    password?: SortOrder
    solicitudes?: SolicitudesOrderByRelationAggregateInput
  }

  export type UsuariosWhereUniqueInput = {
    id?: number
  }

  export type UsuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nombreapellido?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _avg?: UsuariosAvgOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
    _sum?: UsuariosSumOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombreapellido?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type ColectivoWhereInput = {
    AND?: Enumerable<ColectivoWhereInput>
    OR?: Enumerable<ColectivoWhereInput>
    NOT?: Enumerable<ColectivoWhereInput>
    id?: IntFilter | number
    interno?: StringFilter | string
    id_linea?: IntFilter | number
    linea?: XOR<LineasRelationFilter, LineasWhereInput>
  }

  export type ColectivoOrderByWithRelationInput = {
    id?: SortOrder
    interno?: SortOrder
    id_linea?: SortOrder
    linea?: LineasOrderByWithRelationInput
  }

  export type ColectivoWhereUniqueInput = {
    id?: number
  }

  export type ColectivoOrderByWithAggregationInput = {
    id?: SortOrder
    interno?: SortOrder
    id_linea?: SortOrder
    _count?: ColectivoCountOrderByAggregateInput
    _avg?: ColectivoAvgOrderByAggregateInput
    _max?: ColectivoMaxOrderByAggregateInput
    _min?: ColectivoMinOrderByAggregateInput
    _sum?: ColectivoSumOrderByAggregateInput
  }

  export type ColectivoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ColectivoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ColectivoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ColectivoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    interno?: StringWithAggregatesFilter | string
    id_linea?: IntWithAggregatesFilter | number
  }

  export type ParadasWhereInput = {
    AND?: Enumerable<ParadasWhereInput>
    OR?: Enumerable<ParadasWhereInput>
    NOT?: Enumerable<ParadasWhereInput>
    id?: IntFilter | number
    latitud?: StringFilter | string
    longitud?: StringFilter | string
    id_linea?: IntFilter | number
    direccion?: StringFilter | string
    linea?: XOR<LineasRelationFilter, LineasWhereInput>
    solicitudes?: SolicitudesListRelationFilter
  }

  export type ParadasOrderByWithRelationInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    id_linea?: SortOrder
    direccion?: SortOrder
    linea?: LineasOrderByWithRelationInput
    solicitudes?: SolicitudesOrderByRelationAggregateInput
  }

  export type ParadasWhereUniqueInput = {
    id?: number
  }

  export type ParadasOrderByWithAggregationInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    id_linea?: SortOrder
    direccion?: SortOrder
    _count?: ParadasCountOrderByAggregateInput
    _avg?: ParadasAvgOrderByAggregateInput
    _max?: ParadasMaxOrderByAggregateInput
    _min?: ParadasMinOrderByAggregateInput
    _sum?: ParadasSumOrderByAggregateInput
  }

  export type ParadasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParadasScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParadasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParadasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    latitud?: StringWithAggregatesFilter | string
    longitud?: StringWithAggregatesFilter | string
    id_linea?: IntWithAggregatesFilter | number
    direccion?: StringWithAggregatesFilter | string
  }

  export type SolicitudesWhereInput = {
    AND?: Enumerable<SolicitudesWhereInput>
    OR?: Enumerable<SolicitudesWhereInput>
    NOT?: Enumerable<SolicitudesWhereInput>
    id?: IntFilter | number
    id_usuario?: IntFilter | number
    id_linea?: IntFilter | number
    paradaDestino?: IntFilter | number
    paradaInicio?: IntFilter | number
    parada?: XOR<ParadasRelationFilter, ParadasWhereInput>
    usuario?: XOR<UsuariosRelationFilter, UsuariosWhereInput>
    linea?: XOR<LineasRelationFilter, LineasWhereInput>
  }

  export type SolicitudesOrderByWithRelationInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
    parada?: ParadasOrderByWithRelationInput
    usuario?: UsuariosOrderByWithRelationInput
    linea?: LineasOrderByWithRelationInput
  }

  export type SolicitudesWhereUniqueInput = {
    id?: number
  }

  export type SolicitudesOrderByWithAggregationInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
    _count?: SolicitudesCountOrderByAggregateInput
    _avg?: SolicitudesAvgOrderByAggregateInput
    _max?: SolicitudesMaxOrderByAggregateInput
    _min?: SolicitudesMinOrderByAggregateInput
    _sum?: SolicitudesSumOrderByAggregateInput
  }

  export type SolicitudesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SolicitudesScalarWhereWithAggregatesInput>
    OR?: Enumerable<SolicitudesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SolicitudesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_usuario?: IntWithAggregatesFilter | number
    id_linea?: IntWithAggregatesFilter | number
    paradaDestino?: IntWithAggregatesFilter | number
    paradaInicio?: IntWithAggregatesFilter | number
  }

  export type LineasWhereInput = {
    AND?: Enumerable<LineasWhereInput>
    OR?: Enumerable<LineasWhereInput>
    NOT?: Enumerable<LineasWhereInput>
    id?: IntFilter | number
    linea?: StringFilter | string
    paradas?: ParadasListRelationFilter
    colectivos?: ColectivoListRelationFilter
    solicitudes?: SolicitudesListRelationFilter
  }

  export type LineasOrderByWithRelationInput = {
    id?: SortOrder
    linea?: SortOrder
    paradas?: ParadasOrderByRelationAggregateInput
    colectivos?: ColectivoOrderByRelationAggregateInput
    solicitudes?: SolicitudesOrderByRelationAggregateInput
  }

  export type LineasWhereUniqueInput = {
    id?: number
  }

  export type LineasOrderByWithAggregationInput = {
    id?: SortOrder
    linea?: SortOrder
    _count?: LineasCountOrderByAggregateInput
    _avg?: LineasAvgOrderByAggregateInput
    _max?: LineasMaxOrderByAggregateInput
    _min?: LineasMinOrderByAggregateInput
    _sum?: LineasSumOrderByAggregateInput
  }

  export type LineasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LineasScalarWhereWithAggregatesInput>
    OR?: Enumerable<LineasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LineasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    linea?: StringWithAggregatesFilter | string
  }

  export type UsuariosCreateInput = {
    nombreapellido: string
    email: string
    password: string
    solicitudes?: SolicitudesCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateInput = {
    id?: number
    nombreapellido: string
    email: string
    password: string
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUpdateInput = {
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    solicitudes?: SolicitudesUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosCreateManyInput = {
    id?: number
    nombreapellido: string
    email: string
    password: string
  }

  export type UsuariosUpdateManyMutationInput = {
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ColectivoCreateInput = {
    interno: string
    linea: LineasCreateNestedOneWithoutColectivosInput
  }

  export type ColectivoUncheckedCreateInput = {
    id?: number
    interno: string
    id_linea: number
  }

  export type ColectivoUpdateInput = {
    interno?: StringFieldUpdateOperationsInput | string
    linea?: LineasUpdateOneRequiredWithoutColectivosNestedInput
  }

  export type ColectivoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    interno?: StringFieldUpdateOperationsInput | string
    id_linea?: IntFieldUpdateOperationsInput | number
  }

  export type ColectivoCreateManyInput = {
    id?: number
    interno: string
    id_linea: number
  }

  export type ColectivoUpdateManyMutationInput = {
    interno?: StringFieldUpdateOperationsInput | string
  }

  export type ColectivoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    interno?: StringFieldUpdateOperationsInput | string
    id_linea?: IntFieldUpdateOperationsInput | number
  }

  export type ParadasCreateInput = {
    latitud: string
    longitud: string
    direccion: string
    linea: LineasCreateNestedOneWithoutParadasInput
    solicitudes?: SolicitudesCreateNestedManyWithoutParadaInput
  }

  export type ParadasUncheckedCreateInput = {
    id?: number
    latitud: string
    longitud: string
    id_linea: number
    direccion: string
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutParadaInput
  }

  export type ParadasUpdateInput = {
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    linea?: LineasUpdateOneRequiredWithoutParadasNestedInput
    solicitudes?: SolicitudesUpdateManyWithoutParadaNestedInput
  }

  export type ParadasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    id_linea?: IntFieldUpdateOperationsInput | number
    direccion?: StringFieldUpdateOperationsInput | string
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutParadaNestedInput
  }

  export type ParadasCreateManyInput = {
    id?: number
    latitud: string
    longitud: string
    id_linea: number
    direccion: string
  }

  export type ParadasUpdateManyMutationInput = {
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
  }

  export type ParadasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    id_linea?: IntFieldUpdateOperationsInput | number
    direccion?: StringFieldUpdateOperationsInput | string
  }

  export type SolicitudesCreateInput = {
    paradaDestino: number
    parada: ParadasCreateNestedOneWithoutSolicitudesInput
    usuario: UsuariosCreateNestedOneWithoutSolicitudesInput
    linea: LineasCreateNestedOneWithoutSolicitudesInput
  }

  export type SolicitudesUncheckedCreateInput = {
    id?: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
  }

  export type SolicitudesUpdateInput = {
    paradaDestino?: IntFieldUpdateOperationsInput | number
    parada?: ParadasUpdateOneRequiredWithoutSolicitudesNestedInput
    usuario?: UsuariosUpdateOneRequiredWithoutSolicitudesNestedInput
    linea?: LineasUpdateOneRequiredWithoutSolicitudesNestedInput
  }

  export type SolicitudesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_linea?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
    paradaInicio?: IntFieldUpdateOperationsInput | number
  }

  export type SolicitudesCreateManyInput = {
    id?: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
  }

  export type SolicitudesUpdateManyMutationInput = {
    paradaDestino?: IntFieldUpdateOperationsInput | number
  }

  export type SolicitudesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_linea?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
    paradaInicio?: IntFieldUpdateOperationsInput | number
  }

  export type LineasCreateInput = {
    linea: string
    paradas?: ParadasCreateNestedManyWithoutLineaInput
    colectivos?: ColectivoCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesCreateNestedManyWithoutLineaInput
  }

  export type LineasUncheckedCreateInput = {
    id?: number
    linea: string
    paradas?: ParadasUncheckedCreateNestedManyWithoutLineaInput
    colectivos?: ColectivoUncheckedCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutLineaInput
  }

  export type LineasUpdateInput = {
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUpdateManyWithoutLineaNestedInput
    colectivos?: ColectivoUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUpdateManyWithoutLineaNestedInput
  }

  export type LineasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUncheckedUpdateManyWithoutLineaNestedInput
    colectivos?: ColectivoUncheckedUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutLineaNestedInput
  }

  export type LineasCreateManyInput = {
    id?: number
    linea: string
  }

  export type LineasUpdateManyMutationInput = {
    linea?: StringFieldUpdateOperationsInput | string
  }

  export type LineasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    linea?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type SolicitudesListRelationFilter = {
    every?: SolicitudesWhereInput
    some?: SolicitudesWhereInput
    none?: SolicitudesWhereInput
  }

  export type SolicitudesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nombreapellido?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreapellido?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nombreapellido?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type LineasRelationFilter = {
    is?: LineasWhereInput | null
    isNot?: LineasWhereInput | null
  }

  export type ColectivoCountOrderByAggregateInput = {
    id?: SortOrder
    interno?: SortOrder
    id_linea?: SortOrder
  }

  export type ColectivoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_linea?: SortOrder
  }

  export type ColectivoMaxOrderByAggregateInput = {
    id?: SortOrder
    interno?: SortOrder
    id_linea?: SortOrder
  }

  export type ColectivoMinOrderByAggregateInput = {
    id?: SortOrder
    interno?: SortOrder
    id_linea?: SortOrder
  }

  export type ColectivoSumOrderByAggregateInput = {
    id?: SortOrder
    id_linea?: SortOrder
  }

  export type ParadasCountOrderByAggregateInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    id_linea?: SortOrder
    direccion?: SortOrder
  }

  export type ParadasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_linea?: SortOrder
  }

  export type ParadasMaxOrderByAggregateInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    id_linea?: SortOrder
    direccion?: SortOrder
  }

  export type ParadasMinOrderByAggregateInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    id_linea?: SortOrder
    direccion?: SortOrder
  }

  export type ParadasSumOrderByAggregateInput = {
    id?: SortOrder
    id_linea?: SortOrder
  }

  export type ParadasRelationFilter = {
    is?: ParadasWhereInput | null
    isNot?: ParadasWhereInput | null
  }

  export type UsuariosRelationFilter = {
    is?: UsuariosWhereInput | null
    isNot?: UsuariosWhereInput | null
  }

  export type SolicitudesCountOrderByAggregateInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
  }

  export type SolicitudesAvgOrderByAggregateInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
  }

  export type SolicitudesMaxOrderByAggregateInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
  }

  export type SolicitudesMinOrderByAggregateInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
  }

  export type SolicitudesSumOrderByAggregateInput = {
    id?: SortOrder
    id_usuario?: SortOrder
    id_linea?: SortOrder
    paradaDestino?: SortOrder
    paradaInicio?: SortOrder
  }

  export type ParadasListRelationFilter = {
    every?: ParadasWhereInput
    some?: ParadasWhereInput
    none?: ParadasWhereInput
  }

  export type ColectivoListRelationFilter = {
    every?: ColectivoWhereInput
    some?: ColectivoWhereInput
    none?: ColectivoWhereInput
  }

  export type ParadasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColectivoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LineasCountOrderByAggregateInput = {
    id?: SortOrder
    linea?: SortOrder
  }

  export type LineasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LineasMaxOrderByAggregateInput = {
    id?: SortOrder
    linea?: SortOrder
  }

  export type LineasMinOrderByAggregateInput = {
    id?: SortOrder
    linea?: SortOrder
  }

  export type LineasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SolicitudesCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutUsuarioInput>, Enumerable<SolicitudesUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutUsuarioInput>
    createMany?: SolicitudesCreateManyUsuarioInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type SolicitudesUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutUsuarioInput>, Enumerable<SolicitudesUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutUsuarioInput>
    createMany?: SolicitudesCreateManyUsuarioInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SolicitudesUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutUsuarioInput>, Enumerable<SolicitudesUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: SolicitudesCreateManyUsuarioInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SolicitudesUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutUsuarioInput>, Enumerable<SolicitudesUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: SolicitudesCreateManyUsuarioInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type LineasCreateNestedOneWithoutColectivosInput = {
    create?: XOR<LineasCreateWithoutColectivosInput, LineasUncheckedCreateWithoutColectivosInput>
    connectOrCreate?: LineasCreateOrConnectWithoutColectivosInput
    connect?: LineasWhereUniqueInput
  }

  export type LineasUpdateOneRequiredWithoutColectivosNestedInput = {
    create?: XOR<LineasCreateWithoutColectivosInput, LineasUncheckedCreateWithoutColectivosInput>
    connectOrCreate?: LineasCreateOrConnectWithoutColectivosInput
    upsert?: LineasUpsertWithoutColectivosInput
    connect?: LineasWhereUniqueInput
    update?: XOR<LineasUpdateWithoutColectivosInput, LineasUncheckedUpdateWithoutColectivosInput>
  }

  export type LineasCreateNestedOneWithoutParadasInput = {
    create?: XOR<LineasCreateWithoutParadasInput, LineasUncheckedCreateWithoutParadasInput>
    connectOrCreate?: LineasCreateOrConnectWithoutParadasInput
    connect?: LineasWhereUniqueInput
  }

  export type SolicitudesCreateNestedManyWithoutParadaInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutParadaInput>, Enumerable<SolicitudesUncheckedCreateWithoutParadaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutParadaInput>
    createMany?: SolicitudesCreateManyParadaInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type SolicitudesUncheckedCreateNestedManyWithoutParadaInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutParadaInput>, Enumerable<SolicitudesUncheckedCreateWithoutParadaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutParadaInput>
    createMany?: SolicitudesCreateManyParadaInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type LineasUpdateOneRequiredWithoutParadasNestedInput = {
    create?: XOR<LineasCreateWithoutParadasInput, LineasUncheckedCreateWithoutParadasInput>
    connectOrCreate?: LineasCreateOrConnectWithoutParadasInput
    upsert?: LineasUpsertWithoutParadasInput
    connect?: LineasWhereUniqueInput
    update?: XOR<LineasUpdateWithoutParadasInput, LineasUncheckedUpdateWithoutParadasInput>
  }

  export type SolicitudesUpdateManyWithoutParadaNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutParadaInput>, Enumerable<SolicitudesUncheckedCreateWithoutParadaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutParadaInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutParadaInput>
    createMany?: SolicitudesCreateManyParadaInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutParadaInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutParadaInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type SolicitudesUncheckedUpdateManyWithoutParadaNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutParadaInput>, Enumerable<SolicitudesUncheckedCreateWithoutParadaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutParadaInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutParadaInput>
    createMany?: SolicitudesCreateManyParadaInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutParadaInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutParadaInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type ParadasCreateNestedOneWithoutSolicitudesInput = {
    create?: XOR<ParadasCreateWithoutSolicitudesInput, ParadasUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: ParadasCreateOrConnectWithoutSolicitudesInput
    connect?: ParadasWhereUniqueInput
  }

  export type UsuariosCreateNestedOneWithoutSolicitudesInput = {
    create?: XOR<UsuariosCreateWithoutSolicitudesInput, UsuariosUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutSolicitudesInput
    connect?: UsuariosWhereUniqueInput
  }

  export type LineasCreateNestedOneWithoutSolicitudesInput = {
    create?: XOR<LineasCreateWithoutSolicitudesInput, LineasUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: LineasCreateOrConnectWithoutSolicitudesInput
    connect?: LineasWhereUniqueInput
  }

  export type ParadasUpdateOneRequiredWithoutSolicitudesNestedInput = {
    create?: XOR<ParadasCreateWithoutSolicitudesInput, ParadasUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: ParadasCreateOrConnectWithoutSolicitudesInput
    upsert?: ParadasUpsertWithoutSolicitudesInput
    connect?: ParadasWhereUniqueInput
    update?: XOR<ParadasUpdateWithoutSolicitudesInput, ParadasUncheckedUpdateWithoutSolicitudesInput>
  }

  export type UsuariosUpdateOneRequiredWithoutSolicitudesNestedInput = {
    create?: XOR<UsuariosCreateWithoutSolicitudesInput, UsuariosUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutSolicitudesInput
    upsert?: UsuariosUpsertWithoutSolicitudesInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<UsuariosUpdateWithoutSolicitudesInput, UsuariosUncheckedUpdateWithoutSolicitudesInput>
  }

  export type LineasUpdateOneRequiredWithoutSolicitudesNestedInput = {
    create?: XOR<LineasCreateWithoutSolicitudesInput, LineasUncheckedCreateWithoutSolicitudesInput>
    connectOrCreate?: LineasCreateOrConnectWithoutSolicitudesInput
    upsert?: LineasUpsertWithoutSolicitudesInput
    connect?: LineasWhereUniqueInput
    update?: XOR<LineasUpdateWithoutSolicitudesInput, LineasUncheckedUpdateWithoutSolicitudesInput>
  }

  export type ParadasCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<ParadasCreateWithoutLineaInput>, Enumerable<ParadasUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ParadasCreateOrConnectWithoutLineaInput>
    createMany?: ParadasCreateManyLineaInputEnvelope
    connect?: Enumerable<ParadasWhereUniqueInput>
  }

  export type ColectivoCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<ColectivoCreateWithoutLineaInput>, Enumerable<ColectivoUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ColectivoCreateOrConnectWithoutLineaInput>
    createMany?: ColectivoCreateManyLineaInputEnvelope
    connect?: Enumerable<ColectivoWhereUniqueInput>
  }

  export type SolicitudesCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutLineaInput>, Enumerable<SolicitudesUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutLineaInput>
    createMany?: SolicitudesCreateManyLineaInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type ParadasUncheckedCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<ParadasCreateWithoutLineaInput>, Enumerable<ParadasUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ParadasCreateOrConnectWithoutLineaInput>
    createMany?: ParadasCreateManyLineaInputEnvelope
    connect?: Enumerable<ParadasWhereUniqueInput>
  }

  export type ColectivoUncheckedCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<ColectivoCreateWithoutLineaInput>, Enumerable<ColectivoUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ColectivoCreateOrConnectWithoutLineaInput>
    createMany?: ColectivoCreateManyLineaInputEnvelope
    connect?: Enumerable<ColectivoWhereUniqueInput>
  }

  export type SolicitudesUncheckedCreateNestedManyWithoutLineaInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutLineaInput>, Enumerable<SolicitudesUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutLineaInput>
    createMany?: SolicitudesCreateManyLineaInputEnvelope
    connect?: Enumerable<SolicitudesWhereUniqueInput>
  }

  export type ParadasUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<ParadasCreateWithoutLineaInput>, Enumerable<ParadasUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ParadasCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<ParadasUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: ParadasCreateManyLineaInputEnvelope
    set?: Enumerable<ParadasWhereUniqueInput>
    disconnect?: Enumerable<ParadasWhereUniqueInput>
    delete?: Enumerable<ParadasWhereUniqueInput>
    connect?: Enumerable<ParadasWhereUniqueInput>
    update?: Enumerable<ParadasUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<ParadasUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<ParadasScalarWhereInput>
  }

  export type ColectivoUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<ColectivoCreateWithoutLineaInput>, Enumerable<ColectivoUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ColectivoCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<ColectivoUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: ColectivoCreateManyLineaInputEnvelope
    set?: Enumerable<ColectivoWhereUniqueInput>
    disconnect?: Enumerable<ColectivoWhereUniqueInput>
    delete?: Enumerable<ColectivoWhereUniqueInput>
    connect?: Enumerable<ColectivoWhereUniqueInput>
    update?: Enumerable<ColectivoUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<ColectivoUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<ColectivoScalarWhereInput>
  }

  export type SolicitudesUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutLineaInput>, Enumerable<SolicitudesUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: SolicitudesCreateManyLineaInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type ParadasUncheckedUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<ParadasCreateWithoutLineaInput>, Enumerable<ParadasUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ParadasCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<ParadasUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: ParadasCreateManyLineaInputEnvelope
    set?: Enumerable<ParadasWhereUniqueInput>
    disconnect?: Enumerable<ParadasWhereUniqueInput>
    delete?: Enumerable<ParadasWhereUniqueInput>
    connect?: Enumerable<ParadasWhereUniqueInput>
    update?: Enumerable<ParadasUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<ParadasUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<ParadasScalarWhereInput>
  }

  export type ColectivoUncheckedUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<ColectivoCreateWithoutLineaInput>, Enumerable<ColectivoUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<ColectivoCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<ColectivoUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: ColectivoCreateManyLineaInputEnvelope
    set?: Enumerable<ColectivoWhereUniqueInput>
    disconnect?: Enumerable<ColectivoWhereUniqueInput>
    delete?: Enumerable<ColectivoWhereUniqueInput>
    connect?: Enumerable<ColectivoWhereUniqueInput>
    update?: Enumerable<ColectivoUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<ColectivoUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<ColectivoScalarWhereInput>
  }

  export type SolicitudesUncheckedUpdateManyWithoutLineaNestedInput = {
    create?: XOR<Enumerable<SolicitudesCreateWithoutLineaInput>, Enumerable<SolicitudesUncheckedCreateWithoutLineaInput>>
    connectOrCreate?: Enumerable<SolicitudesCreateOrConnectWithoutLineaInput>
    upsert?: Enumerable<SolicitudesUpsertWithWhereUniqueWithoutLineaInput>
    createMany?: SolicitudesCreateManyLineaInputEnvelope
    set?: Enumerable<SolicitudesWhereUniqueInput>
    disconnect?: Enumerable<SolicitudesWhereUniqueInput>
    delete?: Enumerable<SolicitudesWhereUniqueInput>
    connect?: Enumerable<SolicitudesWhereUniqueInput>
    update?: Enumerable<SolicitudesUpdateWithWhereUniqueWithoutLineaInput>
    updateMany?: Enumerable<SolicitudesUpdateManyWithWhereWithoutLineaInput>
    deleteMany?: Enumerable<SolicitudesScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type SolicitudesCreateWithoutUsuarioInput = {
    paradaDestino: number
    parada: ParadasCreateNestedOneWithoutSolicitudesInput
    linea: LineasCreateNestedOneWithoutSolicitudesInput
  }

  export type SolicitudesUncheckedCreateWithoutUsuarioInput = {
    id?: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
  }

  export type SolicitudesCreateOrConnectWithoutUsuarioInput = {
    where: SolicitudesWhereUniqueInput
    create: XOR<SolicitudesCreateWithoutUsuarioInput, SolicitudesUncheckedCreateWithoutUsuarioInput>
  }

  export type SolicitudesCreateManyUsuarioInputEnvelope = {
    data: Enumerable<SolicitudesCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type SolicitudesUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: SolicitudesWhereUniqueInput
    update: XOR<SolicitudesUpdateWithoutUsuarioInput, SolicitudesUncheckedUpdateWithoutUsuarioInput>
    create: XOR<SolicitudesCreateWithoutUsuarioInput, SolicitudesUncheckedCreateWithoutUsuarioInput>
  }

  export type SolicitudesUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: SolicitudesWhereUniqueInput
    data: XOR<SolicitudesUpdateWithoutUsuarioInput, SolicitudesUncheckedUpdateWithoutUsuarioInput>
  }

  export type SolicitudesUpdateManyWithWhereWithoutUsuarioInput = {
    where: SolicitudesScalarWhereInput
    data: XOR<SolicitudesUpdateManyMutationInput, SolicitudesUncheckedUpdateManyWithoutSolicitudesInput>
  }

  export type SolicitudesScalarWhereInput = {
    AND?: Enumerable<SolicitudesScalarWhereInput>
    OR?: Enumerable<SolicitudesScalarWhereInput>
    NOT?: Enumerable<SolicitudesScalarWhereInput>
    id?: IntFilter | number
    id_usuario?: IntFilter | number
    id_linea?: IntFilter | number
    paradaDestino?: IntFilter | number
    paradaInicio?: IntFilter | number
  }

  export type LineasCreateWithoutColectivosInput = {
    linea: string
    paradas?: ParadasCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesCreateNestedManyWithoutLineaInput
  }

  export type LineasUncheckedCreateWithoutColectivosInput = {
    id?: number
    linea: string
    paradas?: ParadasUncheckedCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutLineaInput
  }

  export type LineasCreateOrConnectWithoutColectivosInput = {
    where: LineasWhereUniqueInput
    create: XOR<LineasCreateWithoutColectivosInput, LineasUncheckedCreateWithoutColectivosInput>
  }

  export type LineasUpsertWithoutColectivosInput = {
    update: XOR<LineasUpdateWithoutColectivosInput, LineasUncheckedUpdateWithoutColectivosInput>
    create: XOR<LineasCreateWithoutColectivosInput, LineasUncheckedCreateWithoutColectivosInput>
  }

  export type LineasUpdateWithoutColectivosInput = {
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUpdateManyWithoutLineaNestedInput
  }

  export type LineasUncheckedUpdateWithoutColectivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUncheckedUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutLineaNestedInput
  }

  export type LineasCreateWithoutParadasInput = {
    linea: string
    colectivos?: ColectivoCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesCreateNestedManyWithoutLineaInput
  }

  export type LineasUncheckedCreateWithoutParadasInput = {
    id?: number
    linea: string
    colectivos?: ColectivoUncheckedCreateNestedManyWithoutLineaInput
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutLineaInput
  }

  export type LineasCreateOrConnectWithoutParadasInput = {
    where: LineasWhereUniqueInput
    create: XOR<LineasCreateWithoutParadasInput, LineasUncheckedCreateWithoutParadasInput>
  }

  export type SolicitudesCreateWithoutParadaInput = {
    paradaDestino: number
    usuario: UsuariosCreateNestedOneWithoutSolicitudesInput
    linea: LineasCreateNestedOneWithoutSolicitudesInput
  }

  export type SolicitudesUncheckedCreateWithoutParadaInput = {
    id?: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
  }

  export type SolicitudesCreateOrConnectWithoutParadaInput = {
    where: SolicitudesWhereUniqueInput
    create: XOR<SolicitudesCreateWithoutParadaInput, SolicitudesUncheckedCreateWithoutParadaInput>
  }

  export type SolicitudesCreateManyParadaInputEnvelope = {
    data: Enumerable<SolicitudesCreateManyParadaInput>
    skipDuplicates?: boolean
  }

  export type LineasUpsertWithoutParadasInput = {
    update: XOR<LineasUpdateWithoutParadasInput, LineasUncheckedUpdateWithoutParadasInput>
    create: XOR<LineasCreateWithoutParadasInput, LineasUncheckedCreateWithoutParadasInput>
  }

  export type LineasUpdateWithoutParadasInput = {
    linea?: StringFieldUpdateOperationsInput | string
    colectivos?: ColectivoUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUpdateManyWithoutLineaNestedInput
  }

  export type LineasUncheckedUpdateWithoutParadasInput = {
    id?: IntFieldUpdateOperationsInput | number
    linea?: StringFieldUpdateOperationsInput | string
    colectivos?: ColectivoUncheckedUpdateManyWithoutLineaNestedInput
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutLineaNestedInput
  }

  export type SolicitudesUpsertWithWhereUniqueWithoutParadaInput = {
    where: SolicitudesWhereUniqueInput
    update: XOR<SolicitudesUpdateWithoutParadaInput, SolicitudesUncheckedUpdateWithoutParadaInput>
    create: XOR<SolicitudesCreateWithoutParadaInput, SolicitudesUncheckedCreateWithoutParadaInput>
  }

  export type SolicitudesUpdateWithWhereUniqueWithoutParadaInput = {
    where: SolicitudesWhereUniqueInput
    data: XOR<SolicitudesUpdateWithoutParadaInput, SolicitudesUncheckedUpdateWithoutParadaInput>
  }

  export type SolicitudesUpdateManyWithWhereWithoutParadaInput = {
    where: SolicitudesScalarWhereInput
    data: XOR<SolicitudesUpdateManyMutationInput, SolicitudesUncheckedUpdateManyWithoutSolicitudesInput>
  }

  export type ParadasCreateWithoutSolicitudesInput = {
    latitud: string
    longitud: string
    direccion: string
    linea: LineasCreateNestedOneWithoutParadasInput
  }

  export type ParadasUncheckedCreateWithoutSolicitudesInput = {
    id?: number
    latitud: string
    longitud: string
    id_linea: number
    direccion: string
  }

  export type ParadasCreateOrConnectWithoutSolicitudesInput = {
    where: ParadasWhereUniqueInput
    create: XOR<ParadasCreateWithoutSolicitudesInput, ParadasUncheckedCreateWithoutSolicitudesInput>
  }

  export type UsuariosCreateWithoutSolicitudesInput = {
    nombreapellido: string
    email: string
    password: string
  }

  export type UsuariosUncheckedCreateWithoutSolicitudesInput = {
    id?: number
    nombreapellido: string
    email: string
    password: string
  }

  export type UsuariosCreateOrConnectWithoutSolicitudesInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutSolicitudesInput, UsuariosUncheckedCreateWithoutSolicitudesInput>
  }

  export type LineasCreateWithoutSolicitudesInput = {
    linea: string
    paradas?: ParadasCreateNestedManyWithoutLineaInput
    colectivos?: ColectivoCreateNestedManyWithoutLineaInput
  }

  export type LineasUncheckedCreateWithoutSolicitudesInput = {
    id?: number
    linea: string
    paradas?: ParadasUncheckedCreateNestedManyWithoutLineaInput
    colectivos?: ColectivoUncheckedCreateNestedManyWithoutLineaInput
  }

  export type LineasCreateOrConnectWithoutSolicitudesInput = {
    where: LineasWhereUniqueInput
    create: XOR<LineasCreateWithoutSolicitudesInput, LineasUncheckedCreateWithoutSolicitudesInput>
  }

  export type ParadasUpsertWithoutSolicitudesInput = {
    update: XOR<ParadasUpdateWithoutSolicitudesInput, ParadasUncheckedUpdateWithoutSolicitudesInput>
    create: XOR<ParadasCreateWithoutSolicitudesInput, ParadasUncheckedCreateWithoutSolicitudesInput>
  }

  export type ParadasUpdateWithoutSolicitudesInput = {
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    linea?: LineasUpdateOneRequiredWithoutParadasNestedInput
  }

  export type ParadasUncheckedUpdateWithoutSolicitudesInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    id_linea?: IntFieldUpdateOperationsInput | number
    direccion?: StringFieldUpdateOperationsInput | string
  }

  export type UsuariosUpsertWithoutSolicitudesInput = {
    update: XOR<UsuariosUpdateWithoutSolicitudesInput, UsuariosUncheckedUpdateWithoutSolicitudesInput>
    create: XOR<UsuariosCreateWithoutSolicitudesInput, UsuariosUncheckedCreateWithoutSolicitudesInput>
  }

  export type UsuariosUpdateWithoutSolicitudesInput = {
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsuariosUncheckedUpdateWithoutSolicitudesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreapellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type LineasUpsertWithoutSolicitudesInput = {
    update: XOR<LineasUpdateWithoutSolicitudesInput, LineasUncheckedUpdateWithoutSolicitudesInput>
    create: XOR<LineasCreateWithoutSolicitudesInput, LineasUncheckedCreateWithoutSolicitudesInput>
  }

  export type LineasUpdateWithoutSolicitudesInput = {
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUpdateManyWithoutLineaNestedInput
    colectivos?: ColectivoUpdateManyWithoutLineaNestedInput
  }

  export type LineasUncheckedUpdateWithoutSolicitudesInput = {
    id?: IntFieldUpdateOperationsInput | number
    linea?: StringFieldUpdateOperationsInput | string
    paradas?: ParadasUncheckedUpdateManyWithoutLineaNestedInput
    colectivos?: ColectivoUncheckedUpdateManyWithoutLineaNestedInput
  }

  export type ParadasCreateWithoutLineaInput = {
    latitud: string
    longitud: string
    direccion: string
    solicitudes?: SolicitudesCreateNestedManyWithoutParadaInput
  }

  export type ParadasUncheckedCreateWithoutLineaInput = {
    id?: number
    latitud: string
    longitud: string
    direccion: string
    solicitudes?: SolicitudesUncheckedCreateNestedManyWithoutParadaInput
  }

  export type ParadasCreateOrConnectWithoutLineaInput = {
    where: ParadasWhereUniqueInput
    create: XOR<ParadasCreateWithoutLineaInput, ParadasUncheckedCreateWithoutLineaInput>
  }

  export type ParadasCreateManyLineaInputEnvelope = {
    data: Enumerable<ParadasCreateManyLineaInput>
    skipDuplicates?: boolean
  }

  export type ColectivoCreateWithoutLineaInput = {
    interno: string
  }

  export type ColectivoUncheckedCreateWithoutLineaInput = {
    id?: number
    interno: string
  }

  export type ColectivoCreateOrConnectWithoutLineaInput = {
    where: ColectivoWhereUniqueInput
    create: XOR<ColectivoCreateWithoutLineaInput, ColectivoUncheckedCreateWithoutLineaInput>
  }

  export type ColectivoCreateManyLineaInputEnvelope = {
    data: Enumerable<ColectivoCreateManyLineaInput>
    skipDuplicates?: boolean
  }

  export type SolicitudesCreateWithoutLineaInput = {
    paradaDestino: number
    parada: ParadasCreateNestedOneWithoutSolicitudesInput
    usuario: UsuariosCreateNestedOneWithoutSolicitudesInput
  }

  export type SolicitudesUncheckedCreateWithoutLineaInput = {
    id?: number
    id_usuario: number
    paradaDestino: number
    paradaInicio: number
  }

  export type SolicitudesCreateOrConnectWithoutLineaInput = {
    where: SolicitudesWhereUniqueInput
    create: XOR<SolicitudesCreateWithoutLineaInput, SolicitudesUncheckedCreateWithoutLineaInput>
  }

  export type SolicitudesCreateManyLineaInputEnvelope = {
    data: Enumerable<SolicitudesCreateManyLineaInput>
    skipDuplicates?: boolean
  }

  export type ParadasUpsertWithWhereUniqueWithoutLineaInput = {
    where: ParadasWhereUniqueInput
    update: XOR<ParadasUpdateWithoutLineaInput, ParadasUncheckedUpdateWithoutLineaInput>
    create: XOR<ParadasCreateWithoutLineaInput, ParadasUncheckedCreateWithoutLineaInput>
  }

  export type ParadasUpdateWithWhereUniqueWithoutLineaInput = {
    where: ParadasWhereUniqueInput
    data: XOR<ParadasUpdateWithoutLineaInput, ParadasUncheckedUpdateWithoutLineaInput>
  }

  export type ParadasUpdateManyWithWhereWithoutLineaInput = {
    where: ParadasScalarWhereInput
    data: XOR<ParadasUpdateManyMutationInput, ParadasUncheckedUpdateManyWithoutParadasInput>
  }

  export type ParadasScalarWhereInput = {
    AND?: Enumerable<ParadasScalarWhereInput>
    OR?: Enumerable<ParadasScalarWhereInput>
    NOT?: Enumerable<ParadasScalarWhereInput>
    id?: IntFilter | number
    latitud?: StringFilter | string
    longitud?: StringFilter | string
    id_linea?: IntFilter | number
    direccion?: StringFilter | string
  }

  export type ColectivoUpsertWithWhereUniqueWithoutLineaInput = {
    where: ColectivoWhereUniqueInput
    update: XOR<ColectivoUpdateWithoutLineaInput, ColectivoUncheckedUpdateWithoutLineaInput>
    create: XOR<ColectivoCreateWithoutLineaInput, ColectivoUncheckedCreateWithoutLineaInput>
  }

  export type ColectivoUpdateWithWhereUniqueWithoutLineaInput = {
    where: ColectivoWhereUniqueInput
    data: XOR<ColectivoUpdateWithoutLineaInput, ColectivoUncheckedUpdateWithoutLineaInput>
  }

  export type ColectivoUpdateManyWithWhereWithoutLineaInput = {
    where: ColectivoScalarWhereInput
    data: XOR<ColectivoUpdateManyMutationInput, ColectivoUncheckedUpdateManyWithoutColectivosInput>
  }

  export type ColectivoScalarWhereInput = {
    AND?: Enumerable<ColectivoScalarWhereInput>
    OR?: Enumerable<ColectivoScalarWhereInput>
    NOT?: Enumerable<ColectivoScalarWhereInput>
    id?: IntFilter | number
    interno?: StringFilter | string
    id_linea?: IntFilter | number
  }

  export type SolicitudesUpsertWithWhereUniqueWithoutLineaInput = {
    where: SolicitudesWhereUniqueInput
    update: XOR<SolicitudesUpdateWithoutLineaInput, SolicitudesUncheckedUpdateWithoutLineaInput>
    create: XOR<SolicitudesCreateWithoutLineaInput, SolicitudesUncheckedCreateWithoutLineaInput>
  }

  export type SolicitudesUpdateWithWhereUniqueWithoutLineaInput = {
    where: SolicitudesWhereUniqueInput
    data: XOR<SolicitudesUpdateWithoutLineaInput, SolicitudesUncheckedUpdateWithoutLineaInput>
  }

  export type SolicitudesUpdateManyWithWhereWithoutLineaInput = {
    where: SolicitudesScalarWhereInput
    data: XOR<SolicitudesUpdateManyMutationInput, SolicitudesUncheckedUpdateManyWithoutSolicitudesInput>
  }

  export type SolicitudesCreateManyUsuarioInput = {
    id?: number
    id_linea: number
    paradaDestino: number
    paradaInicio: number
  }

  export type SolicitudesUpdateWithoutUsuarioInput = {
    paradaDestino?: IntFieldUpdateOperationsInput | number
    parada?: ParadasUpdateOneRequiredWithoutSolicitudesNestedInput
    linea?: LineasUpdateOneRequiredWithoutSolicitudesNestedInput
  }

  export type SolicitudesUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linea?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
    paradaInicio?: IntFieldUpdateOperationsInput | number
  }

  export type SolicitudesUncheckedUpdateManyWithoutSolicitudesInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_linea?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
    paradaInicio?: IntFieldUpdateOperationsInput | number
  }

  export type SolicitudesCreateManyParadaInput = {
    id?: number
    id_usuario: number
    id_linea: number
    paradaDestino: number
  }

  export type SolicitudesUpdateWithoutParadaInput = {
    paradaDestino?: IntFieldUpdateOperationsInput | number
    usuario?: UsuariosUpdateOneRequiredWithoutSolicitudesNestedInput
    linea?: LineasUpdateOneRequiredWithoutSolicitudesNestedInput
  }

  export type SolicitudesUncheckedUpdateWithoutParadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_linea?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
  }

  export type ParadasCreateManyLineaInput = {
    id?: number
    latitud: string
    longitud: string
    direccion: string
  }

  export type ColectivoCreateManyLineaInput = {
    id?: number
    interno: string
  }

  export type SolicitudesCreateManyLineaInput = {
    id?: number
    id_usuario: number
    paradaDestino: number
    paradaInicio: number
  }

  export type ParadasUpdateWithoutLineaInput = {
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    solicitudes?: SolicitudesUpdateManyWithoutParadaNestedInput
  }

  export type ParadasUncheckedUpdateWithoutLineaInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    solicitudes?: SolicitudesUncheckedUpdateManyWithoutParadaNestedInput
  }

  export type ParadasUncheckedUpdateManyWithoutParadasInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitud?: StringFieldUpdateOperationsInput | string
    longitud?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
  }

  export type ColectivoUpdateWithoutLineaInput = {
    interno?: StringFieldUpdateOperationsInput | string
  }

  export type ColectivoUncheckedUpdateWithoutLineaInput = {
    id?: IntFieldUpdateOperationsInput | number
    interno?: StringFieldUpdateOperationsInput | string
  }

  export type ColectivoUncheckedUpdateManyWithoutColectivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    interno?: StringFieldUpdateOperationsInput | string
  }

  export type SolicitudesUpdateWithoutLineaInput = {
    paradaDestino?: IntFieldUpdateOperationsInput | number
    parada?: ParadasUpdateOneRequiredWithoutSolicitudesNestedInput
    usuario?: UsuariosUpdateOneRequiredWithoutSolicitudesNestedInput
  }

  export type SolicitudesUncheckedUpdateWithoutLineaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    paradaDestino?: IntFieldUpdateOperationsInput | number
    paradaInicio?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}